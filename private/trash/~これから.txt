コンセプト
Lexerができたところで、とりあえずこれからどうしていくかを考える
取りあえず、考えている仕様としては、「.akranti(仮)ファイルに関連付けをして(自動化できるかをググる)、
.akrantiをダブルクリックするとakrantiainが開いてinteractiveに変換ができる」とやるべきか
課題はいくつかあるが、
①Windowsのコンソールに出力させると多バイト文字が化けそう
②ファイルから入出力できるようにもした方が当然便利
といった感じ。GUIは使いたくないし使えそうにないので使わない。

まあ、外見を考えるのも大事だが内部処理をな

考えられる仕様としては、「規則Aが規則Bの完全な部分集合であれば、AとBは重複してもいい」「A⊂BまたはA⊃BまたはA∧B=∅」とかか
これでいいのかね
まあ、矛盾しないところにもconflictエラーを吐きそうな代物だが、conflictを見過ごすよりはマシやろ


さて、具体的な実装方法はどうするか
まず集合の包含関係を見て、優先順位を確定させる
次に、狭い規則から順に適用していくが、そもそも仕様的に破壊的な作用はできないからな
「それぞれの文字または部分文字列に、変換先を適用する」みたいな仕様になるか

さて、ここで一つ思うことが。
consonant "a" -> $1 /a/
"c" back_vowel -> /k/ $2
とかいう規則にした場合、この2規則って片側が片側の部分集合というわけではないんだよなぁ
ただ$1, $2で互いに影響を与えないからこいつらは許容する仕様にするはず。
故に、「作用点」というのを定義すべきか。前述の例の2行目は作用点が"c"（back_vowelをいじらないから）、1行目は作用点が"a"なので、conflictにならない

包含関係をコード上で表すなら木で管理すべきだろうな

// あ、あと u = "a" | "b" | "c"は、uと書いてあるところを全部展開して"a"の規則と"b"の規則と"c"の規則にするという仕様でよかろう
// 当然無限ループは許容しない
// ただ、当然展開時に$指定がズレないよう工夫が必要である。


// そうそう、!^って欲しくない？「語中なら云々」っていかにも頻出しそうな代物だよね -> 採用

// 問題:データ構造上は許容している「a = "b" ^ "c"」が通らない -> 修正


あと、複数の変換規則を連鎖させる機能もあるといいかもしれない。
どうやって実現するかが問題だが、モジュール制にして%% A_to_B >> B_to_C >> C_to_Dみたいな行を書くことでそれを実行、とかならいけそう


カスタムエラーという機能を思いついた（vowel "R" -> ?? "R cannot be preceded by a vowel; write `ar` or `a'R`"とか）

// "nn"や"ss"にヒットして"ns"や"sn"にヒットしないやつとかどうだろう -> 意図せず採用できてた。 c = "n" | "s" で c cと書くとイケる。分けたい場合はc2 = "n" | "s"と定義し c c2と書く。


$ズレを一時的に禁じた。復活させるかどうかは知らん。動かなくなるのは現状kunreiだけ。


// specialcons = "v" !"a" | "h" | "j"みたいな書き方採用したいんよね
// ただあくまでidentifierは「条件」ではなく具体物を扱わせたい

// あとさー普通に"a" ("b" "c") "d"っての許そうぜ -> 対応


// …吹き飛ばして書き直そう！ -> ok

備考
規則の適用は左から。


