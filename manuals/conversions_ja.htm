<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>akrantiain変換部の仕様</title>
<link rel="stylesheet" type="text/css" href="main.css">
<style>
table.stat { border-spacing: 7px 1px; }
table.stat td { border-color : orange;
     border-width : 2px;
     border-style : solid;
     padding : 4px;
     text-align:center;
}

table.foobar td { border: 1px solid gray; padding: 5px; }

pre {white-space: normal;}
</style>
</head>
<body>
<div><a href="https://github.com/sozysozbot/akrantiain2">View on Github</a></div>
<h1>akrantiain仕様書 &mdash; akrantiain変換部の仕様</h1>
<a href="main_ja.htm">トップに戻る</a><br>
<h2>4. akrantiain変換部の仕様</h2>
<h3 id="define-words">4-(-1). 用語の定義</h3>
<pre>
「AとBの対」とは、A1つとB1つを共に要素として持つデータ構造である。
<br>「AとBの対」のAのことをfstと呼び、Bのことをsndと呼ぶ。
<br>「空白文字」とは、<span class="FIXME" title="Haskellに依存しない説明をせよ">HaskellのisSpace関数に与えるとTrueを返す任意の文字である。</span>
<br>「未定義値」とは、失敗・未設定などを表すための特殊な値である。例えば、Cならヌルポインタ、JavaScriptならundefined、HaskellならNothingで表現できる。
</pre>
<h3 id="conversion-overall">4-0. 概略</h3>
<pre>
変換部は、「環境情報(環境指定識別子一覧と句読点情報からなる)」「変換規則のリスト」「入力文字列」を受けとり、「実行時エラー」または「出力文字列」を返す。
<br>なお、環境情報は大局的な定数であり、変換部の処理を行う任意のタイミングで参照されうる。
<br>2017/03/22 20:49現在、akrantiain変換部は以下のような流れになっている。
</pre>
<!-- ソースコード中の`cook` -->
<ol style="font-family:monospace; line-height: 170%" start="0">
<li>環境指定識別子<code><span class="identifier">USE_NFD</span></code>が指定されていれば、変換規則の入力部・変換規則の出力部・入力文字列をUnicode正規化形式のNFDで分解する。</li>
<li><table class="foobar">
<tr><td></td><td><code><span class="identifier">CASE_SENSITIVE</span></code>あり</td><td><code><span class="identifier">CASE_SENSITIVE</span></code>なし</td></tr>
<tr><td><code><span class="identifier">PRESERVE_CASE</span></code>あり</td><td rowspan="2">sensitivityをtrueにする。</td><td>sensitivityをfalseにする。</td></tr>
<tr><td><code><span class="identifier">PRESERVE_CASE</span></code>なし</td><td>sensitivityをfalseにし、<br>変換規則の入力部と入力文字列を小文字に変換する</td></tr>
</table>
</li>
<li>
        入力文字列の先頭と末尾にスペースを付加し、1文字ずつ分割し（1文字と未定義値の対）のリストとしてStatに変換する
</li>
<li>「変換規則のリスト」を左から走査していき、Statに順に変換規則を<a href="#apply">適用</a>していく</li>
<li>Statのうち未処理のものがある場合、変換元がスペースまたは句読点なら変換先にスペースを指定する。<br>そうでないとき、環境指定識別子<code><span class="identifier">FALL_THROUGH</span></code>が指定されていなければ実行時エラー#210を吐き、指定されていれば変換先に変換元をそのまま代入する。</li>
<li>変換先を全てつなげ、先頭と末尾にあるスペースをそれぞれ1個だけ削除したものを、環境指定識別子<code><span class="identifier">USE_NFD</span></code>が指定されている場合はさらにUnicode正規化形式のNFCで合成し、出力文字列とする。</li>
</ol>
<pre>2.では、例えば入力文字列が"spaghetti"であれば、次のようなStatへと変換される。</pre>
<table class="stat">
<tr><td>"　"</td><td>"s"</td><td>"p"</td><td>"a"</td><td>"g"</td><td>"h"</td><td>"e"</td><td>"t"</td><td>"t"</td><td>"i"</td><td>"　"</td></tr>
<tr><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td></tr>
</table>
<pre>
Statと変換規則の仕様は後述。
</pre>
<h3 id="stat">4-1. Stat</h3>
<pre>
『文字列と文字列の対』で、対のsndが未定義値であり得るものを、『Stat素』<!-- ソースコード中の`StatElem` -->と呼ぶ。
<br>Stat<!-- ソースコード中の`Stat` -->は、「『Stat素』のリスト」である。例えば次のようなものである。</pre>
<table class="stat">
<tr><td>"s"</td><td>"p"</td><td>"a"</td><td>"gh"</td><td>"e"</td><td>"t"</td><td>"t"</td><td>"i"</td></tr>
<tr><td>null</td><td>"p"</td><td>null</td><td>"g"</td><td>null</td><td>null</td><td>"t"</td><td>null</td></tr>
</table>
<pre>fstをつなげてできる文字列（この例では"spaghetti"）を、Statのconcatと呼ぶ。</pre>
<h3 id="convert">4-2. 変換規則</h3>
<pre>変換規則は、以下の5要素からなる。<!-- ソースコード中の`data Rule` --><code><u>PHONEME</u></code>の定義については<a href="manuals_ja.htm">2章</a>を参照のこと。
<br><code><u>Negation</u></code><!-- ソースコード中の`data Condition` -->は「文字列の集合または語境界」を要素として持ち、それらが登場しない時に限り変換を行うことを表す。
</pre>
<ol style="font-family:monospace; line-height:170%">
<li>左条件（省略可能）
        <ul><li><code><u>Negation</u></code></li></ul>
</li>
<li>左$リスト
        <ul><li>「『文字列の集合と<code><u>$</u></code>の対』」のリスト。「変換元と変換先の対応」のうち、スラッシュリテラルが登場するまでの<code><u>$</u></code>はここに配置される。</li></ul>
</li>
<li>変換元と変換先の対応
        <ul><li>「『語境界』または『文字列の集合と<code><u>PHONEME</u></code>の対』」のリスト</li></ul>
</li>
<li>右$リスト
        <ul><li>「『文字列の集合と<code><u>$</u></code>の対』」のリスト。「変換元と変換先の対応」のうち、右から数えてスラッシュリテラルが登場するまでの<code><u>$</u></code>はここに配置される。</li></ul>
</li>
<li>右条件（省略可能）
        <ul><li><code><u>Negation</u></code></li></ul>
</li>
</ol>

<h3 id="apply">4-3. 変換規則の適用</h3>
<!-- ソースコード中の`apply` -->
<pre>変換規則適用は、「Stat」と「変換規則」を受け取り、「Stat」を返す。
<br>2017/03/22 20:49現在、変換規則の適用は以下のような流れで行われている。
</pre>
<ol style="font-family:monospace; line-height:170%">
<li>受け取ったStatと変換規則をmatchに渡し、「『Statの対』のリスト」hogeを得る。</li>
<li>hogeが空なら最初のStatを変更せずに返し、さもなくばリストhogeの最終要素のfstをa、sndをbと名付け続行。</li>
<li>「aと変換規則をmatchに渡し返ってきたStat」の後ろにbを結合し、返す。</li>
</ol>

<h3 id="match">4-4. match関数の仕様</h3>
<!-- ソースコード中の`match` -->
<pre>match関数は、「Stat」と「変換規則」を受け取り、「『Statの対』のリスト」を返す。</pre>
<ol style="font-family:monospace; line-height:170%">
<li> 「Statを二分したもの」の一覧を用意する。</li>
<li>変換規則を右から、つまり「右条件→右$リスト→『変換元と変換先の対応』→左$リスト→左条件」の順に辿っていき、一覧の中のうちパターンにマッチするもののみを残しながら、変換先を書き込んでいく</li>
</ol>
<pre>
というのが大まかな流れであっ<strong>た。</strong>
<br>しかし、いわゆる<a href="https://github.com/sozysozbot/akrantiain2/issues/21">aimezバグ</a>の解決を図るため、少々処理が変更され、次のような流れとなった。</pre>
<ol style="font-family:monospace; line-height:170%">
<li> 「Statを二分したもの」の一覧のうち、「右条件→右$リスト」の条件を既に満たしているものを用意する。</li>
<li>『変換元と変換先の対応』を右から辿っていき、一覧の中のうちパターンにマッチするもののみを残しながら、変換先を書き込んでいく。</li>
<li>残ったもののうち、「左$リスト→左条件」の条件を満たすもののみを残す。</li>
</ol>
<pre>
以下、辿っていくときに行われることを具体的に説明していく。
</pre>

<h4>4-4-1. 候補の用意と右条件・右$リストの処理</h4> <!-- ソースコード中の`cutlist` -->
<pre>これについては「百聞は一見に如かず」なので、図を用いる。</pre>
<pre>入力:</pre>
<table class="stat">
<tr><td>"ch"</td><td>"a"</td><td>"t"</td><td>"eau"</td></tr>
<tr><td>/ʃ/</td><td>null</td><td>null</td><td>null</td></tr>
</table>
<pre>出力:</pre>
<table>
<tr><td>(</td><td>空リスト</td><td>,</td><td><table class="stat">
        <tr><td>"ch"</td><td>"a"</td><td>"t"</td><td>"eau"</td></tr>
        <tr><td>/ʃ/</td><td>null</td><td>null</td><td>null</td></tr>
        </table></td>
        <td>)</td></tr>
<tr><td>(</td><td>
        <table class="stat">
        <tr><td>"ch"</td></tr>
        <tr><td>/ʃ/</td></tr>
        </table></td><td>,</td><td><table class="stat">
        <tr><td>"a"</td><td>"t"</td><td>"eau"</td></tr>
        <tr><td>null</td><td>null</td><td>null</td></tr>
        </table></td>
        <td>)</td></tr>
<tr><td>(</td><td>
        <table class="stat">
        <tr><td>"ch"</td><td>"a"</td></tr>
        <tr><td>/ʃ/</td><td>null</td></tr>
        </table></td><td>,</td><td><table class="stat">
        <tr><td>"t"</td><td>"eau"</td></tr>
        <tr><td>null</td><td>null</td></tr>
        </table></td>
        <td>)</td></tr>
<tr><td>(</td><td>
        <table class="stat">
        <tr><td>"ch"</td><td>"a"</td><td>"t"</td></tr>
        <tr><td>/ʃ/</td><td>null</td><td>null</td></tr>
        </table></td><td>,</td><td><table class="stat">
        <tr><td>"eau"</td></tr>
        <tr><td>null</td></tr>
        </table></td>
        <td>)</td></tr>
<tr><td>(</td><td>
        <table class="stat">
        <tr><td>"ch"</td><td>"a"</td><td>"t"</td><td>"eau"</td></tr>
        <tr><td>/ʃ/</td><td>null</td><td>null</td><td>null</td></tr>
        </table></td><td>,</td><td>空リスト</td>
        <td>)</td></tr>
</table>
<pre>この中で、右$リストfと右条件gという2つの制約を（結果的に）<strong>既に</strong>くぐり抜けているもののみが次の段階に渡される。
<br>これはどういう風に判定されるかというと、「sndのconcatが、以下の2条件を共に満たす2つの文字列AとBの結合であるかどうか」として判定される。</pre><!-- ソースコード中の`fooFilter` -->
<ul style="font-family:monospace; line-height:170%">
<li>「Aは、『右$リストの各要素のfst（これは文字列の集合である）からうまく文字列を選び、選んだ文字列を結合したもの』と一致する」（sensitivityがfalseであるとき、この「一致」判定は大文字と小文字を同一視する。）</li>
<li><span class="FIXME" title="これでいいのか？">「Bが空文字列である」</span>または「Bの接頭辞（空文字列を含まない。自身を含む。）は全て、右条件gを満たす」（sensitivityがfalseであるとき、この「接頭辞」判定は大文字と小文字を同一視する。）</li>
</ul>
<pre>右条件が存在しない場合は、右条件として恒真関数を用いればよい。
<br>
<br>具体例を見てみよう。まず、右$リストfが空リストであり、右条件gが「"an", "en", "in", "on", "un"のどれでもない」という条件であるとき、例えば、以下のStat対は通過する。
</pre>
<table>
<tr><td>(</td><td>空リスト</td><td>,</td><td><table class="stat">
        <tr><td>"w"</td><td>"a"</td><td>"n"</td><td>"t"</td></tr>
        <tr><td>null</td><td>null</td><td>null</td><td>null</td></tr>
        </table></td>
        <td>)</td></tr>
<tr><td>(</td><td>
        <table class="stat">
        <tr><td>"w"</td><td>"a"</td></tr>
        <tr><td>null</td><td>null</td></tr>
        </table></td><td>,</td><td><table class="stat">
        <tr><td>"n"</td><td>"t"</td></tr>
        <tr><td>null</td><td>null</td></tr>
        </table></td>
        <td>)</td></tr>
<tr><td>(</td><td>
        <table class="stat">
        <tr><td>"w"</td><td>"a"</td><td>"n"</td></tr>
        <tr><td>null</td><td>null</td><td>null</td></tr>
        </table></td><td>,</td><td><table class="stat">
        <tr><td>"t"</td></tr>
        <tr><td>null</td></tr>
        </table></td>
        <td>)</td></tr>
<tr><td>(</td><td>
        <table class="stat">
        <tr><td>"w"</td><td>"a"</td><td>"n"</td><td>"t"</td></tr>
        <tr><td>null</td><td>null</td><td>null</td><td>null</td></tr>
        </table></td><td>,</td><td>空リスト</td>
        <td>)</td></tr>
</table>
<pre>しかし、例えば、以下のStat対は通過しない。</pre>
<table>
<tr><td>(</td><td>
        <table class="stat">
        <tr><td>"w"</td></tr>
        <tr><td>null</td></tr>
        </table></td><td>,</td><td><table class="stat">
        <tr><td>"a"</td><td>"n"</td><td>"t"</td></tr>
        <tr><td>null</td><td>null</td><td>null</td></tr>
        </table></td>
        <td>)</td></tr>
</table>
<pre>なぜなら、このStat対のsndのconcatである"ant"の接頭辞の一つ"an"は、条件「"an", "en", "in", "on", "un"のどれでもない」を満たさないからである。</pre>

<pre>右$リストfが空リストであり、かつ右条件が「語境界の否定」という場合についても見てみよう。
<br>この時、例えば、以下のStat対は通過する。
</pre>

<table>
<tr><td>(</td><td>空リスト</td><td>,</td><td><table class="stat">
        <tr><td>"a"</td><td>" "</td><td>"c"</td><td>"a"</td><td>"t"</td></tr>
        <tr><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td></tr>
        </table></td>
        <td>)</td></tr>
<tr><td>(</td><td>
        <table class="stat">
        <tr><td>"a"</td><td>" "</td></tr>
        <tr><td>null</td><td>null</td></tr>
        </table></td><td>,</td><td><table class="stat">
        <tr><td>"c"</td><td>"a"</td><td>"t"</td></tr>
        <tr><td>null</td><td>null</td><td>null</td></tr>
        </table></td>
        <td>)</td></tr>
<tr><td>(</td><td>
        <table class="stat">
        <tr><td>"a"</td><td>" "</td><td>"c"</td></tr>
        <tr><td>null</td><td>null</td><td>null</td></tr>
        </table></td><td>,</td><td><table class="stat">
        <tr><td>"a"</td><td>"t"</td></tr>
        <tr><td>null</td><td>null</td></tr>
        </table></td>
        <td>)</td></tr>
<tr><td>(</td><td>
        <table class="stat">
        <tr><td>"a"</td><td>" "</td><td>"c"</td><td>"a"</td></tr>
        <tr><td>null</td><td>null</td><td>null</td><td>null</td></tr>
        </table></td><td>,</td><td><table class="stat">
        <tr><td>"t"</td></tr>
        <tr><td>null</td></tr>
        </table></td>
        <td>)</td></tr>
<tr><td>(</td><td>
        <table class="stat">
        <tr><td>"a"</td><td>" "</td><td>"c"</td><td>"a"</td><td>"t"</td></tr>
        <tr><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td></tr>
        </table></td><td>,</td><td>空リスト</td>
        <td>)</td></tr>
</table>
<pre>しかし、例えば、以下のStat対は通過しない。</pre>
<table>
<tr><td>(</td><td>
        <table class="stat">
        <tr><td>"a"</td></tr>
        <tr><td>null</td></tr>
        </table></td><td>,</td><td><table class="stat">
        <tr><td>" "</td><td>"c"</td><td>"a"</td><td>"t"</td></tr>
        <tr><td>null</td><td>null</td><td>null</td><td>null</td></tr>
        </table></td>
        <td>)</td></tr>
</table>
<pre>なぜなら、このStat対のsndのconcatである" cat"の接頭辞の一つ" "は、条件「スペースまたは句読点のみで構成される文字列ではない」を満たさないからである。</pre>
<pre>右$リストfが空リストでない場合についても見てみよう。
<br>右$リストfが「集合{<code>"a"</code>, <code>"e"</code>, <code>"i"</code>, <code>"o"</code>, <code>"u"</code>, <code>"y"</code>}のみからなるリストと<code>$</code>の対」、右条件gが不存在（=恒真関数）である場合、</pre>
<table>
<tr><td>(</td><td>
        <table class="stat">
        <tr><td>"ai"</td> <td>"m"</td> </tr>
        <tr><td>"ɛ"</td><td>null</td></tr>
        </table></td><td>,</td><td><table class="stat">
        <tr><td>"ez"</td></tr>
        <tr><td>"e"</td></tr>
        </table></td>
        <td>)</td></tr>
</table>
<pre>は通過する。なぜなら、sndのconcatは"ez"であるが、これは「右$リスト中の各要素からうまく文字列を選んで結合させると作れる"e"」と「恒真関数を満たす文字列"z"」の結合とみなせるからである。
<br>一方で、右$リストfが「集合{<code>"a"</code>, <code>"e"</code>, <code>"i"</code>, <code>"o"</code>, <code>"u"</code>, <code>"y"</code>}のみからなるリストと<code>$</code>の対」、右条件gが「<code>"z"</code>でない」である場合、</pre>
</pre>
<table>
<tr><td>(</td><td>
        <table class="stat">
        <tr><td>"ai"</td> <td>"m"</td> </tr>
        <tr><td>"ɛ"</td><td>null</td></tr>
        </table></td><td>,</td><td><table class="stat">
        <tr><td>"ez"</td></tr>
        <tr><td>"e"</td></tr>
        </table></td>
        <td>)</td></tr>
</table>
<pre>は通過しない。なぜなら、sndのconcatである"ez"をどこで分割しても、
<br>「fからうまく選んで作れる文字列」と「接頭辞が<code>"z"</code>と等しくなることがない、言い換えれば、"z"で始まらない、文字列」に分かれることがないからである。</pre>

<h4>4-4-2. 「変換元と変換先の対応」の処理</h4>
<pre>「『語境界』または『文字列の集合と<code><u>PHONEME</u></code>の対』のリスト」を右から辿っていき、条件を満たすもののみを通過させながら、Stat内の適切な『変換先』のところに情報を記入していく。</pre>
<h5>4-4-2-1. 『語境界』のとき</h5>
<pre>環境情報を使用する。各Stat対について、以下のような変更を行う。<!-- ソースコード中の`handleBoundary` --></pre>
<ol style="font-family:monospace; line-height:170%">
<li>Stat対のfstを構成する全てのStat素から、それぞれfstをとって作られるリストを考え、このリストから空文字列を全て除く。<br>
こうしてできたリストが空リストでなく、かつそのリストの最終要素に空白文字でも句読点でもない文字があるならば、そもそも通過させない。</li>
<li>fstの後ろから、「『変換元』部分が全て空白文字か句読点である」を満たすStat素を削り落とし、sndの先頭にくっつける。</li>
</ol>
<pre>具体例を見てみよう。<code>,</code>が句読点であるとき、以下のStat対</pre>
<table>
<tr><td>(</td><td>
        <table class="stat">
        <tr><td>"a"</td> <td>" "</td> <td>"b"</td> <td>","</td> <td>" "</td> </tr>
        <tr><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td></tr>
        </table></td><td>,</td><td><table class="stat">
        <tr><td>"c"</td><td>"d"</td><td>"e"</td></tr>
        <tr><td>null</td><td>null</td><td>null</td></tr>
        </table></td>
        <td>)</td></tr>
</table>
<pre>の「Stat対のfstを構成する全てのStat素から、それぞれfstをとって作られるリスト」は次の青枠で示した部分であり、</pre>
<table>
<tr><td>(</td><td>
        <table class="stat">
        <tr><td style="border-color:blue">"a"</td> <td style="border-color:blue">" "</td> <td style="border-color:blue">"b"</td> <td style="border-color:blue">","</td> <td style="border-color:blue">" "</td> </tr>
        <tr><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td></tr>
        </table></td><td>,</td><td><table class="stat">
        <tr><td>"c"</td><td>"d"</td><td>"e"</td></tr>
        <tr><td>null</td><td>null</td><td>null</td></tr>
        </table></td>
        <td>)</td></tr>
</table>

<pre>今回の場合は「このリストから空文字列を全て除いたリスト」はこのリストそのものである。
<br>このリストの最終要素は空白文字からのみ構成されるので、このStat対は通過し、次のようなStat対となる。</pre>
<table>
<tr><td>(</td><td>
        <table class="stat">
        <tr><td>"a"</td> <td>" "</td> <td>"b"</td> </tr>
        <tr><td>null</td><td>null</td><td>null</td></tr>
        </table></td><td>,</td><td><table class="stat">
        <tr><td>","</td> <td>" "</td> <td>"c"</td><td>"d"</td><td>"e"</td></tr>
        <tr><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td></tr>
        </table></td>
        <td>)</td></tr>
</table>
<pre>fstの「後ろから」削っていくので、<code>a</code>と<code>b</code>の間にある空白は手が加わらないことに注意。</pre>

<pre>別の具体例を見てみよう。<code>,</code>が句読点であるとき、以下のStat対</pre>
<table>
<tr><td>(</td><td>
        <table class="stat">
        <tr><td>"a"</td> <td>" "</td> <td>"b"</td> <td>"c"</td> <td>""</td> </tr>
        <tr><td>null</td><td>null</td><td>null</td><td>null</td><td>"s"</td></tr>
        </table></td><td>,</td><td><table class="stat">
        <tr><td>"c"</td><td>"d"</td><td>"e"</td></tr>
        <tr><td>null</td><td>null</td><td>null</td></tr>
        </table></td>
        <td>)</td></tr>
</table>
<pre>の「Stat対のfstを構成する全てのStat素から、それぞれfstをとって作られるリスト」は次の青枠で示した部分であり、</pre>
<table>
<tr><td>(</td><td>
        <table class="stat">
        <tr><td style="border-color:blue">"a"</td> <td style="border-color:blue">" "</td> <td style="border-color:blue">"b"</td> <td style="border-color:blue">"c"</td> <td style="border-color:blue">""</td> </tr>
        <tr><td>null</td><td>null</td><td>null</td><td>null</td><td>"s"</td></tr>
        </table></td><td>,</td><td><table class="stat">
        <tr><td>"c"</td><td>"d"</td><td>"e"</td></tr>
        <tr><td>null</td><td>null</td><td>null</td></tr>
        </table></td>
        <td>)</td></tr>
</table>

<pre>今回の場合、「このリストから空文字列を全て除いたリスト」は</pre>

        <table class="stat">
        <tr><td style="border-color:blue">"a"</td> <td style="border-color:blue">" "</td> <td style="border-color:blue">"b"</td> <td style="border-color:blue">"c"</td></tr>

        </table>
<pre>である。
このリストの最終要素は空白文字以外の文字を含むので、今回はStat対は通過しない。</pre>



<h5>4-4-2-2.「『文字列の集合と<code><u>PHONEME</u></code>の対』のリスト」のとき</h5>
<pre>まず、「変換関数」<!-- ソースコード中の`testPattern` -->を定義する。変換関数は、「<code><u>PHONEME</u></code>」「パターン文字列」「Stat対」を受け取り、「Stat対」を返したり返さなかったりする関数である。（「Stat対または未定義値」を返す、と言ってもよい）
<br>「Stat対のfstの後ろからk個のStat素を削り落とすと、その削り落としたところのconcatがパターン文字列と一致する」となるようなkが存在しないなら未定義値を返す。
<span class="FIXME" title="空文字列があって、kが複数ありうる場合は？">存在するならば</span>、
</pre>
<ul style="font-family:monospace; line-height:170%">
<li><code><u>PHONEME</u></code>が<code>$</code>である場合
<ul><li>Stat対のfstの後ろからk個のStat素を削り落とし、Stat対のsndの先頭にくっつける。そしてそれを返す。</li></ul></li>
<li><code><u>PHONEME</u></code>が文字列である場合
<ol><li>Stat対のfstの後ろからk個のStat素を削り落とす。</li>
<li>そのk個のStat素のそれぞれのsndが全て未定義値である場合、Stat対のsndの先頭に「パターン文字列と<code><u>PHONEME</u></code>の対」をくっつけ、それを返す。さもなくば未定義値を返す。</li>
</ol>
</li>
</ul>

<pre>
具体例を見てみよう。
<br>まず、<code><u>PHONEME</u></code>が<code>$</code>である場合。パターン文字列が<code><span class="string">"a"</span></code>、Stat対が次のようなものであるときを考える。
</pre>
<table>
<tr><td>(</td><td>
        <table class="stat">
        <tr><td>"c"</td> <td>"a"</td> <td>"n"</td> <td>"a"</td> </tr>
        <tr><td>null</td><td>null</td><td>null</td><td>null</td></tr>
        </table></td><td>,</td><td><table class="stat">
        <tr><td>"l"</td></tr>
        <tr><td>null</td></tr>
        </table></td>
        <td>)</td></tr>
</table>
<pre>
この時、Stat対のfstの後ろから1個のStat素を削り落とすと、その削り落としたところのconcatは"a"であり、パターン文字列と一致する。
<br>ゆえに、変換関数は以下のStat対を返す。
</pre>
<table>
<tr><td>(</td><td>
        <table class="stat">
        <tr><td>"c"</td> <td>"a"</td> <td>"n"</td> </tr>
        <tr><td>null</td><td>null</td><td>null</td></tr>
        </table></td><td>,</td><td><table class="stat">
        <tr><td>"a"</td> <td>"l"</td></tr>
        <tr><td>null</td><td>null</td></tr>
        </table></td>
        <td>)</td></tr>
</table>
<pre>
次に、<code><u>PHONEME</u></code>が文字列である場合。<code><u>PHONEME</u></code>が<code><span class="slash">/ɛ/</span></code>、パターン文字列が<code><span class="string">"ai"</span></code>であるときを考える。
<br>Stat対が次のようなものであるとき、
</pre>
<table>
<tr><td>(</td><td>
        <table class="stat">
        <tr><td>"a"</td> <td>"i"</td> </tr>
        <tr><td>null</td><td>null</td></tr>
        </table></td><td>,</td><td><table class="stat">
        <tr><td>"m"</td> <td>"ez"</td></tr>
        <tr><td>null</td><td>"e"</td></tr>
        </table></td>
        <td>)</td></tr>
</table>
<pre>
Stat対のfstの後ろから2個のStat素を削り落とすと、その削り落としたところのconcatは"ai"であり、パターン文字列と一致する。
<br>さらに、その2個のStat素は共に「sndが未定義値である」を満たす。
<br>ゆえに、変換関数は以下のStat対を返す。
</pre>
<table>
<tr><td>(</td><td>空リスト</td><td>,</td><td><table class="stat">
        <tr><td>"ai"</td><td>"m"</td><td>"ez"</td></tr>
        <tr><td>"ɛ"</td><td>null</td><td>"e"</td></tr>
        </table></td>
        <td>)</td></tr></table>
<pre>一方、Stat対が次のようなものであるとき、</pre>
<table>
<tr><td>(</td><td>
        <table class="stat">
        <tr><td>"h"</td> <td>"a"</td><td>"i"</td></tr>
        <tr><td>null</td><td>"a"</td><td>"i"</td></tr>
        </table></td><td>,</td><td><table class="stat">
        <tr><td>"̈"</td> <td>"r"</td></tr>
        <tr><td>""</td><td>null</td></tr>
        </table></td>
        <td>)</td></tr>
</table>
<pre>
（補足:左から4つ目のStat素はCOMBINING DIAERESIS (U+0308)である。）
<br>Stat対のfstの後ろから2個のStat素を削り落とすと、その削り落としたところのconcatは"ai"であり、パターン文字列と一致するが、
<br>2個のStat素のsndは未定義値ではないので、変換関数は未定義値を返す。 
<br>
</pre>
<pre>
さて、変換関数が定義できたので、これを用い 「変換元と変換先の対応」が「『文字列の集合と<code><u>PHONEME</u></code>の対』のリスト」のときに行う操作について説明する。
</pre>
<ol style="font-family:monospace; line-height:170%">
<li>空のリストansを用意する。</li>
<li>二重ループを回す。外側のループは「Stat対のリスト」についてのループで、内側のループが「与えられた『文字列の集合』」についてのループである。<br>
<span style="font-size:80%">ちなみに、1週間分ぐらいの進捗が溶けた悪名高き「linepurineバグ」は、端的に言えばこのループの順番を間違えたことによるバグである。</span>
<ul><li>ループ内では、「Stat対」と「文字列」、そして「<code><u>PHONEME</u></code>」を「変換関数」に渡し、返ってきたStat対をansの末尾に付加する。未定義値が返ってきた場合はなにもしない。</li></ul></li>
<li>最後に、ansを返す。</li>
</ol>

<pre>
4-4-2-2.は、あくまで「『Stat対を通過させる』という操作を繰り返す」という見方で説明した4-4-1.や4-4-2-1.や4-4-3.と違い、
<br>「Stat対のリスト」から二重ループを経て別の「Stat対のリスト」を返すという見方で説明していることに留意せよ。
</pre>
<h4>4-4-3. 左$リストと左条件の処理</h4><!-- ソースコード中の`fooFilter2` -->
<pre>
左条件gと左$リストfという2つの制約を「これから」くぐり抜けると考慮できるもののみが最終的に通過する。
<br>これはどういう風に判定されるかというと、「fstのconcatが、以下の2条件を共に満たす2つの文字列BとAの結合であるかどうか」として判定される。
</pre>
<ul style="font-family:monospace; line-height:170%">
<li><span class="FIXME" title="これでいいのか？">「Bが空文字列である」</span>または「Bの接尾辞（空文字列を含まない。自身を含む。）は全て、左条件gを満たす」（sensitivityがfalseであるとき、この「接尾辞」判定は大文字と小文字を同一視する。）</li>
<li>「Aは、『左$リストの各要素のfst（これは文字列の集合である）からうまく文字列を選び、選んだ文字列を結合したもの』と一致する」（sensitivityがfalseであるとき、この「一致」判定は大文字と小文字を同一視する。）</li>
</ul>

<pre>
具体例を見てみよう。左条件gが「"an", "en", "in", "on", "un"のどれでもない」という条件であり、左$リストが空リストであるとき、例えば、以下のStat対は通過する。
</pre>
<table>
<tr><td>(</td><td>空リスト</td><td>,</td><td><table class="stat">
        <tr><td>"w"</td><td>"a"</td><td>"n"</td><td>"t"</td></tr>
        <tr><td>null</td><td>null</td><td>null</td><td>null</td></tr>
        </table></td>
        <td>)</td></tr>
<tr><td>(</td><td>
        <table class="stat">
        <tr><td>"w"</td></tr>
        <tr><td>null</td></tr>
        </table></td><td>,</td><td><table class="stat">
        <tr><td>"a"</td><td>"n"</td><td>"t"</td></tr>
        <tr><td>null</td><td>null</td><td>null</td></tr>
        </table></td>
        <td>)</td></tr>
<tr><td>(</td><td>
        <table class="stat">
        <tr><td>"w"</td><td>"a"</td></tr>
        <tr><td>null</td><td>null</td></tr>
        </table></td><td>,</td><td><table class="stat">
        <tr><td>"n"</td><td>"t"</td></tr>
        <tr><td>null</td><td>null</td></tr>
        </table></td>
        <td>)</td></tr>
<tr><td>(</td><td>
        <table class="stat">
        <tr><td>"w"</td><td>"a"</td><td>"n"</td><td>"t"</td></tr>
        <tr><td>null</td><td>null</td><td>null</td><td>null</td></tr>
        </table></td><td>,</td><td>空リスト</td>
        <td>)</td></tr>
</table>
<pre>しかし、例えば、以下のStat対は通過しない。</pre>
<table>
<tr><td>(</td><td>
        <table class="stat">
        <tr><td>"w"</td><td>"a"</td><td>"n"</td></tr>
        <tr><td>null</td><td>null</td><td>null</td></tr>
        </table></td><td>,</td><td><table class="stat">
        <tr><td>"t"</td></tr>
        <tr><td>null</td></tr>
        </table></td>
        <td>)</td></tr>
</table>
<pre>なぜなら、このStat対のfstのconcatである"wan"の接尾辞の一つ"an"は、条件「"an", "en", "in", "on", "un"のどれでもない」を満たさないからである。</pre>

<pre>条件が「語境界の否定」という場合についても見てみよう。この時も左$リストが空リストであるとする。
<br>この時、例えば、以下のStat対は通過する。
</pre>

<table>
<tr><td>(</td><td>空リスト</td><td>,</td><td><table class="stat">
        <tr><td>"a"</td><td>" "</td><td>"c"</td><td>"a"</td><td>"t"</td></tr>
        <tr><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td></tr>
        </table></td>
        <td>)</td></tr>
<tr><td>(</td><td>
        <table class="stat">
        <tr><td>"a"</td></tr>
        <tr><td>null</td></tr>
        </table></td><td>,</td><td><table class="stat">
        <tr><td>" "</td><td>"c"</td><td>"a"</td><td>"t"</td></tr>
        <tr><td>null</td><td>null</td><td>null</td><td>null</td></tr>
        </table></td>
        <td>)</td></tr>
<tr><td>(</td><td>
        <table class="stat">
        <tr><td>"a"</td><td>" "</td><td>"c"</td></tr>
        <tr><td>null</td><td>null</td><td>null</td></tr>
        </table></td><td>,</td><td><table class="stat">
        <tr><td>"a"</td><td>"t"</td></tr>
        <tr><td>null</td><td>null</td></tr>
        </table></td>
        <td>)</td></tr>
<tr><td>(</td><td>
        <table class="stat">
        <tr><td>"a"</td><td>" "</td><td>"c"</td><td>"a"</td></tr>
        <tr><td>null</td><td>null</td><td>null</td><td>null</td></tr>
        </table></td><td>,</td><td><table class="stat">
        <tr><td>"t"</td></tr>
        <tr><td>null</td></tr>
        </table></td>
        <td>)</td></tr>
<tr><td>(</td><td>
        <table class="stat">
        <tr><td>"a"</td><td>" "</td><td>"c"</td><td>"a"</td><td>"t"</td></tr>
        <tr><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td></tr>
        </table></td><td>,</td><td>空リスト</td>
        <td>)</td></tr>
</table>
<pre>しかし、例えば、以下のStat対は通過しない。</pre>
<table>
<tr><td>(</td><td>
        <table class="stat">
        <tr><td>"a"</td><td>" "</td></tr>
        <tr><td>null</td><td>null</td></tr>
        </table></td><td>,</td><td><table class="stat">
        <tr><td>"c"</td><td>"a"</td><td>"t"</td></tr>
        <tr><td>null</td><td>null</td><td>null</td></tr>
        </table></td>
        <td>)</td></tr>
</table>
<pre>なぜなら、このStat対のfstのconcatである"a "の接尾辞の一つ" "は、条件「スペースまたは句読点のみで構成される文字列ではない」を満たさないからである。</pre>
<pre>
左$リストが空リストでない時についても見てみよう。 
<br>左条件gが不存在（=恒真関数）、左$リストfが「集合{<code>"a"</code>, <code>"e"</code>, <code>"i"</code>, <code>"o"</code>, <code>"u"</code>, <code>"y"</code>}のみからなるリストと<code>$</code>の対」である場合、</pre>
<table>
<tr><td>(</td><td><table class="stat">
        <tr><td>"ze"</td></tr>
        <tr><td>"e"</td></tr>
        </table></td><td>,</td><td>
        <table class="stat">
        <tr><td>"m"</td> <td>"ia"</td> </tr>
        <tr><td>null</td><td>"ɛ"</td>  </tr>
        </table></td>
        <td>)</td></tr>
</table>
<pre>は通過する。なぜなら、fstのconcatは"ze"であるが、これは「恒真関数を満たす文字列"z"」と「左$リスト中の各要素からうまく文字列を選んで結合させると作れる"e"」との結合とみなせるからである。
<br>一方で、左条件gが「<code>"z"</code>でない」、左$リストfが「集合{<code>"a"</code>, <code>"e"</code>, <code>"i"</code>, <code>"o"</code>, <code>"u"</code>, <code>"y"</code>}のみからなるリストと<code>$</code>の対」である場合、</pre>
</pre>
<table>
<tr><td>(</td><td><table class="stat">
        <tr><td>"ze"</td></tr>
        <tr><td>"e"</td></tr>
        </table></td><td>,</td><td>
        <table class="stat">
        <tr><td>"m"</td> <td>"ia"</td> </tr>
        <tr><td>null</td><td>"ɛ"</td>  </tr>
        </table></td>
        <td>)</td></tr>
</table>
<pre>は通過しない。なぜなら、fstのconcatである"ze"をどこで分割しても、
<br>「接尾辞が<code>"z"</code>と等しくなることがない、言い換えれば、"z"で終わらない、文字列」と「fからうまく選んで作れる文字列」に分かれることがないからである。</pre>
</body>
</html>
