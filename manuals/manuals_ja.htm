<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>akrantiainマニュアル（日本語）</title>
<link rel="stylesheet" type="text/css" href="main.css">
<style>
@font-face {
    font-family: "Fynelipa";
    src: url("./Fynetliparxe.woff");  format('woff');
}

</style>
</head>
<body>
<div><a href="https://github.com/sozysozbot/akrantiain2">View on Github</a></div>
<h1>akrantiainマニュアル</h1>
<a href="main_ja.htm">トップに戻る</a><br>
<a href="./manuals_en.htm" class="lang">English Version</a>
<!-- <a href="./manuals_ja.htm" class="lang">日本語版</a> -->
<a href="./manuals_conlang_lpa.htm" class="lang" style="font-family:'Fynelipa'">kanteluescosti virle lineparine</a>
<h2>2. 「文列」の構文規則</h2>
<h3 id="structure">2-0. 構造</h3>
<pre>
「文列」とは、文の集まりである。文には<a href="#ident">識別子定義文</a>と<a href="#convert">変換規則定義文</a>、そして<a href="#atmark">環境指定文</a>がある。
変換規則定義文を上から辿っていき、順に変換規則を適用することによりakrantiainは動作する。
故に、変換規則定義文の順番を入れ替えると動作が変わる可能性があるが、一方識別子定義文や環境指定文の位置や順序はakrantiainの動作に一切影響を与えない。
行末は文の境目である。行をまたいで1文を定義することはできない。
逆に、文末のセミコロンは、行の最後および行コメントの直前では省略できる。
</pre>
<h3 id="comment">2-1. コメント</h3>
<pre>
<code>#</code>から行末までに書かれたものは無視される。ただし、<a href="#literal">文字列リテラル</a>および<a href="#slash">スラッシュリテラル</a>内の<code>#</code>はコメントを意味しない。
複数行コメントは存在しない。
</pre>
<h3 id="ident">2-2. 識別子定義文</h3>
<pre>
識別子定義文は、次のような構造を持つ。
</pre><div class="pre">
<code><u>識別子</u> = <u>1個以上の文字列リテラル</u> | <u>1個以上の文字列リテラル</u> | <u>1個以上の文字列リテラル</u> | <u>1個以上の文字列リテラル</u>;</code></div><pre>
例としては、こんな感じである。
</pre><div class="pre">
<code><span class="identifier">sample</span> = <span class="string">"foo"</span> | <span class="string">"bar"</span> <span class="string">"baz"</span> | <span class="string">"foobar"</span>;</code></div><pre>
こう書くと、識別子<code><span class="identifier">sample</span></code>が<code><span class="string">"foo"</span></code>、<code><span class="string">"bar" "baz"</span></code>、<code><span class="string">"foobar"</span></code>の3つのどれかにマッチするパターンとして定義される。
識別子は、アルファベットの後に、（アルファベット・数字・<code>_</code>）が0個以上続いたものである。

同一の識別子を複数回定義すると、エラーが発生する。

特殊な識別子として、<code><span class="identifier">PUNCTUATION</span></code>がある。例えば<code><span class="identifier">PUNCTUATION</span> = <span class="string">"."</span> | <span class="string">","</span> | <span class="string">"!"</span> | <span class="string">"?";</span></code>と定義すると、akrantiainはこれらの文字を句読点と認識する。
これは、例えば<code>This is a pen.</code>という文において、<code>n</code>の字は語末なのだということをakrantiainに認識させるのに必要である。
<span class="FIXME">現状、複数文字の文字列リテラル（例：<code><span class="string">"foo"</span></code>）を<code><span class="identifier">PUNCTUATION</span></code>の定義で用いた時の挙動は未定義である。これは不具合であり、後のバージョンで修正される予定である。</span>
</pre>
<h3 id="convert">2-3. 変換規則定義文</h3>
<pre>
<code><u>SELECT</u></code>を<code>^</code>または「1つの識別子」または「1個の文字列リテラル」または<code>( <u>1個以上の文字列リテラル</u> | <u>1個以上の文字列リテラル</u> | <u>1個以上の文字列リテラル</u> )</code>とし、
<code><u>CONDITION</u></code>は<code><u>SELECT</u></code>に<code>!</code>を前置したものとする。
<code><u>PHONEME</u></code>は<code>$</code>か<code><u>スラッシュリテラル</u></code>とする。
このとき、変換規則定義文は、次のような構造を持つ。
</pre><div class="pre">
<code><u>0または1個のCONDITION</u> <u>1個以上のSELECT</u> <u>0または1個のCONDITION</u> -&gt; <u>1個以上のPHONEME</u>;</code>
</div><pre>
ここで、「1個以上の<code><u>SELECT</u></code>」を構成する<code><u>SELECT</u></code>のうち<code>^</code>以外のものの個数と、「1個以上の<code><u>PHONEME</u></code>」を構成する<code><u>PHONEME</u></code>の個数は一致している必要がある。不一致の場合エラーが発生する。

例としては、こんな感じである。
</pre><div class="pre">
<code><span class="string">"u"</span> <span class="string">"g"</span> !<span class="identifier">vowel</span> -&gt; <span class="slash">/u/</span> <span class="slash">/u/</span>;</code></div><pre>
こう書くと、「文字列<code><span class="string">"u"</span></code>の後に文字列<code><span class="string">"g"</span></code>があり、直後がパターン<code><span class="identifier">vowel</span></code>にマッチしないとき、<code><span class="string">"u"</span></code>を<code><span class="slash">/u/</span></code>に、<code><span class="string">"g"</span></code>も<code><span class="slash">/u/</span></code>に変換する」という規則が定義される。

なお、<code>-&gt;</code>を構成する<code>-</code>と<code>&gt;</code>の間にスペースを入れることはできない。

<code>^</code>は語の境界にマッチするパターンである。<code>$</code>は「特に変換先のスラッシュリテラルを指定せず、別の規則によって変換させる」ことを表す。
<code>^</code>と<code>$</code>の例としては、こんな感じである。
</pre><div class="pre">
<code><span class="string">"n"</span> ^ (<span class="string">"m"</span>|<span class="string">"p"</span>) -&gt; <span class="slash">/m/</span> $</code></div><pre>
こう書くと、「文字列<code><span class="string">"n"</span></code>の後に語境界があり、その後に<code>(<span class="string">"m"</span>|<span class="string">"p"</span>)</code>にマッチする文字列があるとき、
<code><span class="string">"n"</span></code>を<span class="slash">/m/</span>に置き換え、<code>(<span class="string">"m"</span>|<span class="string">"p"</span>)</code>にマッチした文字列については保留し、後に登場する規則に委ねる」という規則が定義される。

変換規則定義文内で用いている識別子がどの識別子定義文でも定義されていない場合は、エラーが発生する。
</pre>
<h3 id="atmark">2-4. 環境指定文</h3>
<pre>
環境指定文は、次のような構造を持つ。
</pre><div class="pre">
<code>@ <u>識別子</u> ;</code></div><pre>
この文は、akrantiainの挙動を、<code><u>識別子</u></code>により指定された挙動に変更することを示す文である。同一の環境指定が複数あってもエラーではない。
現状で挙動が定義されている環境指定識別子の一覧は、次の通りである。
</pre><table class="pre">
<tr><td>環境指定識別子</td><td>意味</td></tr>
<tr><td><code><span class="identifier">CASE_SENSITIVE</span></code></td><td>変換元において大文字と小文字を区別する</td></tr>
<tr><td><code><span class="identifier">FALL_THROUGH</span></code></td><td>入力文字列の中で変換規則に消費されなかったものをエラーとせず素通りさせる</td></tr>
</table>
<h3 id="literal">2-5. 文字列リテラル</h3>
<pre>
文字列リテラルは、変換元の文字列を表現するためのリテラルである。文字列リテラルは<code><span class="string">"</span></code>で始まり<code><span class="string">"</span></code>で終わり、内部に改行を含むことはない。
<code>"</code>という文字自体を含む文字列を文字列リテラルとして表現するには、文字列中の<code>"</code>を文字列リテラル内で<code><span class="string">\"</span></code>と表記する必要がある。
<code>\</code>という文字を含む文字列を文字列リテラルとして表現するには、文字列中の<code>\</code>を文字列リテラル内で<code><span class="string">\\</span></code>と表記する必要がある。

デフォルトでは、文字列リテラル内の大文字と小文字は区別されない。
区別させるには、<a href="#atmark">環境指定文</a>で環境指定識別子<code><span class="identifier">CASE_SENSITIVE</span></code>を指定する必要がある。
</pre>
<h3 id="slash">2-6. スラッシュリテラル</h3>
<pre>
スラッシュリテラルは、変換先の文字列を表現するためのリテラルである。スラッシュリテラルは<code><span class="slash">/</span></code>で始まり<code><span class="slash">/</span></code>で終わり、内部に改行を含むことはない。
<code>/</code>という文字自体を含む文字列をスラッシュリテラルとして表現するには、文字列中の<code>"</code>をスラッシュリテラル内で<code><span class="slash">\/</span></code>と表記する必要がある。
<code>\</code>という文字を含む文字列をスラッシュリテラルとして表現するには、文字列中の<code>\</code>をスラッシュリテラル内で<code><span class="slash">\\</span></code>と表記する必要がある。
</pre>
</body>
</html>
